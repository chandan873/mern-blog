{"ast":null,"code":"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst multer = require(\"multer\");\nconst jwt = require(\"jsonwebtoken\");\nconst bcrypt = require(\"bcryptjs\");\nconst cors = require(\"cors\");\nconst app = express();\nconst PORT = 5001;\nconst SECRET_KEY = \"your_secret_key\"; // Change this to a secure secret\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(\"/uploads\", express.static(\"uploads\"));\n\n// ðŸ”¹ **Setup Multer for Image Uploads**\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, \"uploads/\"),\n  filename: (req, file, cb) => cb(null, Date.now() + \"-\" + file.originalname)\n});\nconst upload = multer({\n  storage\n});\n\n// **ðŸ”¹ MongoDB Connection**\nmongoose.connect(\"mongodb+srv://anayatech99:bp3Mnr67TgL7nCOJ@cluster0.cn1zf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB Connected\")).catch(err => console.error(\"MongoDB Connection Error:\", err));\n\n// **ðŸ”¹ User Schema & Model**\nconst userSchema = new mongoose.Schema({\n  username: {\n    type: String,\n    unique: true,\n    required: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n});\nconst User = mongoose.model(\"User\", userSchema);\n\n// **ðŸ”¹ Blog Schema & Model**\nconst blogSchema = new mongoose.Schema({\n  title: String,\n  author: String,\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  },\n  image: String,\n  sections: [{\n    heading: String,\n    paragraph: String\n  }],\n  likes: {\n    type: Number,\n    default: 0\n  },\n  likedBy: [{\n    type: String\n  }],\n  // Prevent multiple likes from the same user\n  comments: [{\n    username: String,\n    text: String,\n    date: {\n      type: Date,\n      default: Date.now\n    }\n  }],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\nconst Blog = mongoose.model(\"Blog\", blogSchema);\n\n// **ðŸ”¹ Middleware for JWT Authentication**\nconst authenticate = (req, res, next) => {\n  var _req$header;\n  const token = (_req$header = req.header(\"Authorization\")) === null || _req$header === void 0 ? void 0 : _req$header.split(\" \")[1];\n  if (!token) return res.status(401).json({\n    error: \"Unauthorized: No token provided\"\n  });\n  try {\n    const decoded = jwt.verify(token, SECRET_KEY);\n    req.user = decoded; // Attach user data to request\n    next();\n  } catch (error) {\n    res.status(401).json({\n      error: \"Unauthorized: Invalid token\"\n    });\n  }\n};\n\n// **ðŸ”¹ User Registration**\napp.post(\"/register\", async (req, res) => {\n  try {\n    const {\n      username,\n      password\n    } = req.body;\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new User({\n      username,\n      password: hashedPassword\n    });\n    await user.save();\n    res.status(201).json({\n      message: \"User registered successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error registering user\"\n    });\n  }\n});\n\n// **ðŸ”¹ User Login**\napp.post(\"/login\", async (req, res) => {\n  try {\n    const {\n      username,\n      password\n    } = req.body;\n    const user = await User.findOne({\n      username\n    });\n    if (!user) return res.status(400).json({\n      error: \"Invalid username or password\"\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      error: \"Invalid username or password\"\n    });\n    const token = jwt.sign({\n      id: user._id,\n      username: user.username\n    }, SECRET_KEY, {\n      expiresIn: \"1h\"\n    });\n    res.json({\n      token,\n      userId: user._id,\n      username: user.username\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error logging in\"\n    });\n  }\n});\n\n// **ðŸ”¹ Upload Blog (Only Authenticated Users)**\napp.post(\"/blogs\", authenticate, upload.single(\"image\"), async (req, res) => {\n  try {\n    const {\n      title,\n      sections\n    } = req.body;\n    const author = req.user.username; // Get author from token\n    const userId = req.user.id; // Get user ID from token\n    const imageUrl = req.file ? `/uploads/${req.file.filename}` : \"\";\n\n    // Create new blog entry\n    const blog = new Blog({\n      title,\n      author,\n      userId,\n      // Store user ID\n      image: imageUrl,\n      sections: JSON.parse(sections)\n    });\n    await blog.save();\n    res.status(201).json(blog);\n  } catch (error) {\n    console.error(\"Error uploading blog:\", error);\n    res.status(500).json({\n      error: \"Error saving blog\"\n    });\n  }\n});\n\n// **ðŸ”¹ Get All Blogs**\napp.get(\"/blogs\", async (req, res) => {\n  try {\n    const blogs = await Blog.find().sort({\n      createdAt: -1\n    });\n    res.json(blogs);\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error fetching blogs\"\n    });\n  }\n});\n\n// **ðŸ”¹ Get Single Blog by ID**\napp.get(\"/blogs/:id\", async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      error: \"Blog not found\"\n    });\n    res.json(blog);\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error fetching blog\"\n    });\n  }\n});\n\n// **ðŸ”¹ Delete Blog (Only Blog Owner Can Delete)**\napp.delete(\"/blogs/:id\", authenticate, async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      error: \"Blog not found\"\n    });\n    if (blog.userId.toString() !== req.user.id) {\n      return res.status(403).json({\n        error: \"Unauthorized: You can only delete your own blogs\"\n      });\n    }\n    await Blog.findByIdAndDelete(req.params.id);\n    res.status(200).json({\n      message: \"Blog deleted successfully\"\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error deleting blog\"\n    });\n  }\n});\n\n// **ðŸ”¹ Like a Blog**\napp.post(\"/blogs/:id/like\", authenticate, async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      error: \"Blog not found\"\n    });\n    if (blog.likedBy.includes(req.user.id)) {\n      return res.status(400).json({\n        error: \"You already liked this blog\"\n      });\n    }\n    blog.likes += 1;\n    blog.likedBy.push(req.user.id);\n    await blog.save();\n    res.json(blog);\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error liking blog\"\n    });\n  }\n});\n\n// **ðŸ”¹ Comment on a Blog**\napp.post(\"/blogs/:id/comment\", authenticate, async (req, res) => {\n  try {\n    const {\n      text\n    } = req.body;\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      error: \"Blog not found\"\n    });\n    const comment = {\n      username: req.user.username,\n      text,\n      date: new Date()\n    };\n    blog.comments.push(comment);\n    await blog.save();\n    res.json(blog);\n  } catch (error) {\n    res.status(500).json({\n      error: \"Error adding comment\"\n    });\n  }\n});\n\n// **ðŸ”¹ Start Server**\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","mongoose","multer","jwt","bcrypt","cors","app","PORT","SECRET_KEY","use","json","static","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","userSchema","Schema","username","type","String","unique","required","password","User","model","blogSchema","title","author","userId","Types","ObjectId","ref","image","sections","heading","paragraph","likes","Number","default","likedBy","comments","text","date","createdAt","Blog","authenticate","res","next","_req$header","token","header","split","status","decoded","verify","user","post","body","hashedPassword","hash","save","message","findOne","isMatch","compare","sign","id","_id","expiresIn","single","imageUrl","blog","JSON","parse","get","blogs","find","sort","findById","params","delete","toString","findByIdAndDelete","includes","push","comment","listen"],"sources":["C:/Users/Administrator/Desktop/New folder/src/components/BlogForm.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst multer = require(\"multer\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cors = require(\"cors\");\r\n\r\nconst app = express();\r\nconst PORT = 5001;\r\nconst SECRET_KEY = \"your_secret_key\"; // Change this to a secure secret\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(\"/uploads\", express.static(\"uploads\"));\r\n\r\n// ðŸ”¹ **Setup Multer for Image Uploads**\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => cb(null, \"uploads/\"),\r\n  filename: (req, file, cb) => cb(null, Date.now() + \"-\" + file.originalname),\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// **ðŸ”¹ MongoDB Connection**\r\nmongoose.connect(\"mongodb+srv://anayatech99:bp3Mnr67TgL7nCOJ@cluster0.cn1zf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\", {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n  .then(() => console.log(\"MongoDB Connected\"))\r\n  .catch((err) => console.error(\"MongoDB Connection Error:\", err));\r\n\r\n// **ðŸ”¹ User Schema & Model**\r\nconst userSchema = new mongoose.Schema({\r\n  username: { type: String, unique: true, required: true },\r\n  password: { type: String, required: true },\r\n});\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\n// **ðŸ”¹ Blog Schema & Model**\r\nconst blogSchema = new mongoose.Schema({\r\n  title: String,\r\n  author: String,\r\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true },\r\n  image: String,\r\n  sections: [{ heading: String, paragraph: String }],\r\n  likes: { type: Number, default: 0 },\r\n  likedBy: [{ type: String }], // Prevent multiple likes from the same user\r\n  comments: [\r\n    {\r\n      username: String,\r\n      text: String,\r\n      date: { type: Date, default: Date.now },\r\n    },\r\n  ],\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\nconst Blog = mongoose.model(\"Blog\", blogSchema);\r\n\r\n// **ðŸ”¹ Middleware for JWT Authentication**\r\nconst authenticate = (req, res, next) => {\r\n  const token = req.header(\"Authorization\")?.split(\" \")[1];\r\n  if (!token) return res.status(401).json({ error: \"Unauthorized: No token provided\" });\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, SECRET_KEY);\r\n    req.user = decoded; // Attach user data to request\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ error: \"Unauthorized: Invalid token\" });\r\n  }\r\n};\r\n\r\n// **ðŸ”¹ User Registration**\r\napp.post(\"/register\", async (req, res) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n    const user = new User({ username, password: hashedPassword });\r\n    await user.save();\r\n    res.status(201).json({ message: \"User registered successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error registering user\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ User Login**\r\napp.post(\"/login\", async (req, res) => {\r\n  try {\r\n    const { username, password } = req.body;\r\n    const user = await User.findOne({ username });\r\n    if (!user) return res.status(400).json({ error: \"Invalid username or password\" });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ error: \"Invalid username or password\" });\r\n\r\n    const token = jwt.sign({ id: user._id, username: user.username }, SECRET_KEY, { expiresIn: \"1h\" });\r\n\r\n    res.json({ token, userId: user._id, username: user.username });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error logging in\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Upload Blog (Only Authenticated Users)**\r\napp.post(\"/blogs\", authenticate, upload.single(\"image\"), async (req, res) => {\r\n  try {\r\n    const { title, sections } = req.body;\r\n    const author = req.user.username; // Get author from token\r\n    const userId = req.user.id; // Get user ID from token\r\n    const imageUrl = req.file ? `/uploads/${req.file.filename}` : \"\";\r\n\r\n    // Create new blog entry\r\n    const blog = new Blog({\r\n      title,\r\n      author,\r\n      userId, // Store user ID\r\n      image: imageUrl,\r\n      sections: JSON.parse(sections),\r\n    });\r\n\r\n    await blog.save();\r\n    res.status(201).json(blog);\r\n  } catch (error) {\r\n    console.error(\"Error uploading blog:\", error);\r\n    res.status(500).json({ error: \"Error saving blog\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Get All Blogs**\r\napp.get(\"/blogs\", async (req, res) => {\r\n  try {\r\n    const blogs = await Blog.find().sort({ createdAt: -1 });\r\n    res.json(blogs);\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error fetching blogs\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Get Single Blog by ID**\r\napp.get(\"/blogs/:id\", async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ error: \"Blog not found\" });\r\n    res.json(blog);\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error fetching blog\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Delete Blog (Only Blog Owner Can Delete)**\r\napp.delete(\"/blogs/:id\", authenticate, async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ error: \"Blog not found\" });\r\n\r\n    if (blog.userId.toString() !== req.user.id) {\r\n      return res.status(403).json({ error: \"Unauthorized: You can only delete your own blogs\" });\r\n    }\r\n\r\n    await Blog.findByIdAndDelete(req.params.id);\r\n    res.status(200).json({ message: \"Blog deleted successfully\" });\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error deleting blog\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Like a Blog**\r\napp.post(\"/blogs/:id/like\", authenticate, async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ error: \"Blog not found\" });\r\n\r\n    if (blog.likedBy.includes(req.user.id)) {\r\n      return res.status(400).json({ error: \"You already liked this blog\" });\r\n    }\r\n\r\n    blog.likes += 1;\r\n    blog.likedBy.push(req.user.id);\r\n    await blog.save();\r\n\r\n    res.json(blog);\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error liking blog\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Comment on a Blog**\r\napp.post(\"/blogs/:id/comment\", authenticate, async (req, res) => {\r\n  try {\r\n    const { text } = req.body;\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ error: \"Blog not found\" });\r\n\r\n    const comment = { username: req.user.username, text, date: new Date() };\r\n    blog.comments.push(comment);\r\n    await blog.save();\r\n\r\n    res.json(blog);\r\n  } catch (error) {\r\n    res.status(500).json({ error: \"Error adding comment\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Start Server**\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
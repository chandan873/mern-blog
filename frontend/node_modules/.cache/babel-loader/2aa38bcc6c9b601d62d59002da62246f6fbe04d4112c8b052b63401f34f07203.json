{"ast":null,"code":"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst multer = require(\"multer\");\nconst jwt = require(\"jsonwebtoken\");\nconst cors = require(\"cors\");\nconst bcrypt = require(\"bcryptjs\");\nconst User = require(\"./models/User\");\nconst Blog = require(\"./models/Blog\");\nconst app = express();\nconst PORT = 5001;\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use(\"/uploads\", express.static(\"uploads\"));\n\n// ðŸ”¹ Setup Multer for Image Uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => cb(null, \"uploads/\"),\n  filename: (req, file, cb) => cb(null, Date.now() + \"-\" + file.originalname)\n});\nconst upload = multer({\n  storage\n});\n\n// ðŸ”¹ JWT Authentication Middleware\nconst authenticate = (req, res, next) => {\n  var _req$header;\n  const token = (_req$header = req.header(\"Authorization\")) === null || _req$header === void 0 ? void 0 : _req$header.split(\" \")[1];\n  if (!token) return res.status(401).json({\n    error: \"Unauthorized: No token provided\"\n  });\n  try {\n    const decoded = jwt.verify(token, \"your_secret_key\");\n    req.user = decoded; // Attach user data to request\n    next();\n  } catch (error) {\n    res.status(401).json({\n      error: \"Unauthorized: Invalid token\"\n    });\n  }\n};\n\n// ðŸ“Œ **Blog Schema Update (Ensure userId is added)**\nconst blogSchema = new mongoose.Schema({\n  title: String,\n  author: String,\n  userId: {\n    type: mongoose.Schema.Types.ObjectId,\n    ref: \"User\",\n    required: true\n  },\n  // ðŸ”¹ Store user ID\n  image: String,\n  sections: [{\n    heading: String,\n    paragraph: String\n  }],\n  likes: {\n    type: Number,\n    default: 0\n  },\n  likedBy: [{\n    type: String\n  }],\n  // Store user IDs or IPs to prevent multiple likes\n  comments: [{\n    username: String,\n    text: String,\n    date: {\n      type: Date,\n      default: Date.now\n    }\n  }],\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// ðŸ“Œ **Upload Blog Route (Only Authenticated Users)**\napp.post(\"/blogs\", authenticate, upload.single(\"image\"), async (req, res) => {\n  try {\n    const {\n      title,\n      sections\n    } = req.body;\n    const author = req.user.username; // Get author from token\n    const userId = req.user.id; // ðŸ”¹ Get user ID from token\n    const imageUrl = req.file ? `/uploads/${req.file.filename}` : \"\";\n\n    // Create new blog entry\n    const blog = new Blog({\n      title,\n      author,\n      userId,\n      // ðŸ”¹ Store user ID\n      image: imageUrl,\n      sections: JSON.parse(sections)\n    });\n    await blog.save();\n    res.status(201).json(blog);\n  } catch (error) {\n    console.error(\"Error uploading blog:\", error);\n    res.status(500).json({\n      error: \"Error saving blog\"\n    });\n  }\n});\n\n// ðŸ”¹ **Delete Blog Route (Only Blog Owner Can Delete)**\napp.delete(\"/blogs/:id\", authenticate, async (req, res) => {\n  try {\n    const blog = await Blog.findById(req.params.id);\n    if (!blog) return res.status(404).json({\n      error: \"Blog not found\"\n    });\n    if (blog.userId.toString() !== req.user.id) {\n      return res.status(403).json({\n        error: \"Unauthorized: You can only delete your own blogs\"\n      });\n    }\n    await Blog.findByIdAndDelete(req.params.id);\n    res.status(200).json({\n      message: \"Blog deleted successfully\"\n    });\n  } catch (error) {\n    console.error(\"Error deleting blog:\", error);\n    res.status(500).json({\n      error: \"Error deleting blog\"\n    });\n  }\n});\n\n// **ðŸ”¹ Connect to MongoDB**\nmongoose.connect(\"mongodb+srv://anayatech99:bp3Mnr67TgL7nCOJ@cluster0.cn1zf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"MongoDB Connected\")).catch(err => console.error(\"MongoDB Connection Error:\", err));\n\n// Start Server\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","mongoose","multer","jwt","cors","bcrypt","User","Blog","app","PORT","use","json","static","storage","diskStorage","destination","req","file","cb","filename","Date","now","originalname","upload","authenticate","res","next","_req$header","token","header","split","status","error","decoded","verify","user","blogSchema","Schema","title","String","author","userId","type","Types","ObjectId","ref","required","image","sections","heading","paragraph","likes","Number","default","likedBy","comments","username","text","date","createdAt","post","single","body","id","imageUrl","blog","JSON","parse","save","console","delete","findById","params","toString","findByIdAndDelete","message","connect","useNewUrlParser","useUnifiedTopology","then","log","catch","err","listen"],"sources":["C:/Users/Administrator/Desktop/New folder/src/components/BlogForm.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst mongoose = require(\"mongoose\");\r\nconst multer = require(\"multer\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst cors = require(\"cors\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst User = require(\"./models/User\");\r\nconst Blog = require(\"./models/Blog\");\r\n\r\nconst app = express();\r\nconst PORT = 5001;\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use(\"/uploads\", express.static(\"uploads\"));\r\n\r\n// ðŸ”¹ Setup Multer for Image Uploads\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => cb(null, \"uploads/\"),\r\n  filename: (req, file, cb) => cb(null, Date.now() + \"-\" + file.originalname),\r\n});\r\nconst upload = multer({ storage });\r\n\r\n// ðŸ”¹ JWT Authentication Middleware\r\nconst authenticate = (req, res, next) => {\r\n  const token = req.header(\"Authorization\")?.split(\" \")[1];\r\n  if (!token) return res.status(401).json({ error: \"Unauthorized: No token provided\" });\r\n\r\n  try {\r\n    const decoded = jwt.verify(token, \"your_secret_key\");\r\n    req.user = decoded; // Attach user data to request\r\n    next();\r\n  } catch (error) {\r\n    res.status(401).json({ error: \"Unauthorized: Invalid token\" });\r\n  }\r\n};\r\n\r\n// ðŸ“Œ **Blog Schema Update (Ensure userId is added)**\r\nconst blogSchema = new mongoose.Schema({\r\n  title: String,\r\n  author: String,\r\n  userId: { type: mongoose.Schema.Types.ObjectId, ref: \"User\", required: true }, // ðŸ”¹ Store user ID\r\n  image: String,\r\n  sections: [{ heading: String, paragraph: String }],\r\n  likes: { type: Number, default: 0 },\r\n  likedBy: [{ type: String }], // Store user IDs or IPs to prevent multiple likes\r\n  comments: [\r\n    {\r\n      username: String,\r\n      text: String,\r\n      date: { type: Date, default: Date.now },\r\n    },\r\n  ],\r\n  createdAt: { type: Date, default: Date.now },\r\n});\r\n\r\n// ðŸ“Œ **Upload Blog Route (Only Authenticated Users)**\r\napp.post(\"/blogs\", authenticate, upload.single(\"image\"), async (req, res) => {\r\n  try {\r\n    const { title, sections } = req.body;\r\n    const author = req.user.username; // Get author from token\r\n    const userId = req.user.id; // ðŸ”¹ Get user ID from token\r\n    const imageUrl = req.file ? `/uploads/${req.file.filename}` : \"\";\r\n\r\n    // Create new blog entry\r\n    const blog = new Blog({\r\n      title,\r\n      author,\r\n      userId, // ðŸ”¹ Store user ID\r\n      image: imageUrl,\r\n      sections: JSON.parse(sections),\r\n    });\r\n\r\n    await blog.save();\r\n    res.status(201).json(blog);\r\n  } catch (error) {\r\n    console.error(\"Error uploading blog:\", error);\r\n    res.status(500).json({ error: \"Error saving blog\" });\r\n  }\r\n});\r\n\r\n// ðŸ”¹ **Delete Blog Route (Only Blog Owner Can Delete)**\r\napp.delete(\"/blogs/:id\", authenticate, async (req, res) => {\r\n  try {\r\n    const blog = await Blog.findById(req.params.id);\r\n    if (!blog) return res.status(404).json({ error: \"Blog not found\" });\r\n\r\n    if (blog.userId.toString() !== req.user.id) {\r\n      return res.status(403).json({ error: \"Unauthorized: You can only delete your own blogs\" });\r\n    }\r\n\r\n    await Blog.findByIdAndDelete(req.params.id);\r\n    res.status(200).json({ message: \"Blog deleted successfully\" });\r\n  } catch (error) {\r\n    console.error(\"Error deleting blog:\", error);\r\n    res.status(500).json({ error: \"Error deleting blog\" });\r\n  }\r\n});\r\n\r\n// **ðŸ”¹ Connect to MongoDB**\r\nmongoose.connect(\"mongodb+srv://anayatech99:bp3Mnr67TgL7nCOJ@cluster0.cn1zf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\", { useNewUrlParser: true, useUnifiedTopology: true })\r\n  .then(() => console.log(\"MongoDB Connected\"))\r\n  .catch(err => console.error(\"MongoDB Connection Error:\", err));\r\n\r\n// Start Server\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}